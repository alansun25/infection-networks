{"version":3,"sources":["styles/graphStyles.ts","components/Graph.tsx","functions/ErdosRenyi.ts","functions/WattsStrogatz.ts","components/RadioCard.jsx","components/algo-forms/RandomForm.tsx","components/algo-forms/SmallWorldForm.tsx","components/algo-forms/PreferentialForm.tsx","components/Settings.tsx","components/About.tsx","App.tsx","index.tsx"],"names":["graphStyles","selector","style","node","data","Graph","algo","randSettings","swSettings","graphContainer","useRef","useEffect","console","log","n","p","l","ref","cy","cytoscape","container","current","elements","i","add","group","id","neighbors","$","neighborhood","j","rand","Math","random","contains","source","target","layout","name","run","fit","undefined","ErdosRenyi","nodes","parseFloat","prob","k","maxZoom","status","h","ni","$id","nh","floor","degree","otherNodes","difference","toArray","length","empty","nonNeighbors","same","WattsStrogatz","knei","zIndex","RadioCard","props","useRadio","getInputProps","getCheckboxProps","input","checkbox","as","color","cursor","borderWidth","borderColor","borderRadius","boxShadow","_checked","bg","px","py","transition","children","RandomForm","setRandSettings","useState","params","setParams","isRequired","mt","value","onChange","valStr","valNum","isNaN","min","max","inputMode","border","_hover","_focus","step","e","backgroundColor","justify","mb","bgColor","fontWeight","_active","type","onClick","SmallWorldForm","setSwSettings","PreferentialForm","size","Settings","useRadioGroup","defaultValue","setAlgo","getRootProps","getRadioProps","m","shadow","map","radio","About","useDisclosure","isOpen","onOpen","onClose","pt","pr","InfoOutline","w","isCentered","isExternal","href","textDecor","App","flexDirection","pos","right","theme","extendTheme","styles","global","body","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d89f0d9.chunk.js","sourcesContent":["import cytoscape from \"cytoscape\";\n\nexport const graphStyles = [\n  {\n    selector: 'node',\n    style: {\n      'background-color': (node: cytoscape.NodeSingular) => node.data('status') === 'infected' ? '#E53E3E' : '#b6b6b6',\n      'height': 20,\n      'width': 20\n    }\n  },\n  {\n    selector: 'edge',\n    style: {\n      'width': 0.5,\n      'line-color': '#a5a5a5',\n      'curve-style': 'bezier'\n    }\n  }\n];","import React, { useEffect, useRef } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nimport ErdosRenyi from '../functions/ErdosRenyi';\nimport WattsStrogatz from '../functions/WattsStrogatz';\n\ntype Props = {\n  algo: string,\n  randSettings: {\n    nodes: number,\n    prob: string,\n    layout: string\n  },\n  swSettings: {\n    nodes: number,\n    prob: string,\n    knei: number,\n    layout: string\n  }\n};\n\nexport default function Graph({ algo, randSettings, swSettings }: Props) {\n  const graphContainer = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    console.log('Graph has rendered.')\n    algo === 'Random' \n      ? ErdosRenyi(randSettings.nodes, parseFloat(randSettings.prob), randSettings.layout, graphContainer) \n      : WattsStrogatz(swSettings.nodes, swSettings.knei, parseFloat(swSettings.prob), swSettings.layout, graphContainer)\n  }, [algo, randSettings.nodes, randSettings.prob, randSettings.layout, swSettings.nodes, swSettings.knei, swSettings.prob, swSettings.layout]);\n\n  return (\n    <Box ref={graphContainer} zIndex='0' h={900}></Box>\n  );\n}","import cytoscape from \"cytoscape\";\nimport { RefObject } from \"react\";\nimport { graphStyles } from \"../styles/graphStyles\";\n\n/*\n * Generates a simple, undirected random graph given n, the number of nodes, and p, \n * the probability that there is an edge between any two nodes.\n * \n * The parameter l sets the layout of the outputted network, and ref refers to the \n * container in which the network visualization will be rendered.\n */\n\nexport default function ErdosRenyi(n: number, p: number, l: string, ref: RefObject<HTMLDivElement>) {\n  // TODO: To handle the issue of the graph re-rendering whenever a tab is visited again, considering creating\n  // the cy object in the Graph component, then pass it into here to populate and save it in state of the Graph\n  // component. May need to declare seperate cy objects in Graph for each different algorithm.\n  let cy = cytoscape({\n    container: ref.current,\n    elements: [],\n    style: graphStyles\n  });\n\n  // Create nodes\n  for (let i = 1; i <= n; i++) {\n    cy.add({\n      group: 'nodes',\n      data: { id: `${i}` }\n    });\n  }\n\n  // Create edges\n  for (let i = 1; i <= n; i++) {\n    const neighbors = cy.$(`#${i}`).neighborhood();\n    for (let j = i; j <= n; j++) {\n      const rand = Math.random();\n      \n      // Prevent self-loops and multiple-edges.\n      // Only create the edge if the randomly generated float is less than p.\n      if (i !== j && rand < p && !neighbors.contains(cy.$(`#${j}`))) {\n        cy.add({\n          group: 'edges', \n          data: { id: `${i}-${j}`, source: `${i}`, target: `${j}` }\n        })\n      }\n    }\n  }\n\n  cy.layout({ name: `${l}` }).run();\n  cy.fit(undefined, 50);\n\n  return cy;\n}","import cytoscape from \"cytoscape\";\nimport { RefObject } from \"react\";\nimport { graphStyles } from \"../styles/graphStyles\";\n\nexport default function WattsStrogatz(n: number, k: number, p: number, l: string, ref: RefObject<HTMLDivElement>) {\n  // TODO: data validation that should be done before params passed in (Look at R implementation for validation steps)\n\n  let cy = cytoscape({\n    container: ref.current,\n    elements: [],\n    style: graphStyles,\n    maxZoom: 1\n  });\n\n  // Create nodes\n  for (let i = 1; i <= n; i++) {\n    let status = 'normal'\n\n    cy.add({\n      group: 'nodes',\n      data: { id: `${i}`, status: status }\n    });\n  }\n\n  // Create edges\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= i + k; j++) {\n      const h = (j - 1) % n + 1; // Wrap back around the ring when j > n\n      const rand = Math.random();\n\n      const ni = cy.nodes().$id(`${i}`);\n      const nh = cy.nodes().$id(`${h}`);\n\n      if (rand < p || ni.neighborhood().contains(nh)) {\n        let source = [ni, nh][Math.floor(Math.random() * 2)];\n\n        // If either node ni or nh have degree n - 1 (already connected to every other node),\n        // make the other node the source by default.\n        if (ni.degree(false) === n - 1) {\n          source = nh;\n        } else if (nh.degree(false) === n - 1) {\n          source = ni;\n        }\n\n        // By default, randomly select a target node to rewire to.\n        const otherNodes = cy.nodes().difference(`#${i}, #${h}`);\n        let target = otherNodes.nodes().toArray()[Math.floor(Math.random() * otherNodes.length)];\n\n        if (ni.degree(false) === n - 1 && nh.degree(false) === n - 1) {\n          // If both ni and nh are connected to every other node, a loop or multi-edge is unavoidable,\n          // so we just choose a purely random node.\n          target = cy.nodes().$id(`${Math.floor(Math.random() * n) + 1}`);\n        } else {\n          const neighbors = source.neighborhood().nodes();\n\n          // If the source has neighbors, choose a target to rewire to such that the target is not\n          // one of these neighbors.\n          if (!neighbors.empty()) {\n            const nonNeighbors = cy.nodes().difference(neighbors);\n            target = nonNeighbors.nodes().toArray()[Math.floor(Math.random() * nonNeighbors.length)];\n            \n            // Prevent loops.\n            while (target.same(source)) {\n              target = nonNeighbors.nodes().toArray()[Math.floor(Math.random() * nonNeighbors.length)];\n            }\n          }\n        }\n\n        cy.add({\n          group: 'edges',\n          data: { id: `${source.id()}-${target.id()}`, source: `${source.id()}`, target: `${target.id()}`}\n        });\n      } else {\n        cy.add({\n          group: 'edges',\n          data: { id: `${ni.id()}-${nh.id()}`, source: `${ni.id()}`, target: `${nh.id()}`}\n        });\n      }\n    }\n  }\n\n  cy.layout({ name: `${l}` }).run();\n  cy.fit(undefined, 50);\n\n  return cy;\n}","import { useRadio } from \"@chakra-ui/radio\";\nimport { Box } from \"@chakra-ui/react\";\n\nexport default function RadioCard(props) {\n  const { getInputProps, getCheckboxProps } = useRadio(props)\n\n  const input = getInputProps()\n  const checkbox = getCheckboxProps()\n\n  return (\n    <Box as=\"label\">\n      <input {...input} />\n      <Box\n        {...checkbox}\n        color=\"gray.700\"\n        cursor=\"pointer\"\n        borderWidth={1}\n        borderColor=\"#f0f0f0\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        _checked={{\n          bg: \"gray.700\",\n          color: \"#f8f8ff\",\n          borderColor: \"gray.700\",\n        }}\n        px={5}\n        py={3}\n        transition='0.3s'\n      >\n        {props.children}\n      </Box>\n    </Box>\n  )\n}","import React, { ChangeEvent, useState } from \"react\"\nimport {\n  FormControl,\n  FormLabel,\n  Flex,\n  FormHelperText,\n  NumberInput,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  Button\n} from \"@chakra-ui/react\"\n\ntype Props = {\n  randSettings: {\n    nodes: number,\n    prob: string,\n    layout: string,\n  }\n  setRandSettings: React.Dispatch<React.SetStateAction<{\n    nodes: number,\n    prob: string,\n    layout: string,\n  }>>\n};\n\nexport default function RandomForm({ randSettings, setRandSettings }: Props) {\n  const [params, setParams] = useState({\n    nodes: 0,\n    prob: '0',\n    layout: 'random'\n  });\n\n  const localHandleNodes = (valStr: string, valNum: number) => {\n    if (isNaN(valNum)) {\n      valNum = 0;\n    }\n\n    setParams({\n      ...params,\n      nodes: valNum\n    })\n  };\n\n  const localHandleProb = (valStr: string, valNum: number) => {\n    setParams({\n      ...params,\n      prob: valStr\n    })\n  };\n\n  const localHandleLayout = (e: ChangeEvent<HTMLSelectElement>) => {\n    setParams({\n      ...params,\n      [e.target.name]: e.target.value\n    })\n  };\n\n  const handleSubmit = (n: number, p: string, l: string) => {\n    setRandSettings({\n      ...randSettings,\n      nodes: n,\n      prob: p,\n      layout: l\n    });\n  };\n\n  return (\n    <form>\n      <FormControl id='nodes' isRequired mt={3}>\n        <FormLabel color='gray.700'>Number of Nodes</FormLabel>\n        <NumberInput \n          value={params.nodes} \n          onChange={localHandleNodes}\n          min={0} \n          max={500}\n          inputMode='numeric'\n        >\n          <NumberInputField\n            color='gray.700' \n            border='1px' \n            borderColor='gray.700'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='gray.700' />\n            <NumberDecrementStepper color='gray.700' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>0 to 500</FormHelperText>\n      </FormControl>\n      <FormControl id='prob' isRequired mt={3}>\n        <FormLabel color='gray.700'>Probability of an Edge Between Two Nodes</FormLabel>\n        <NumberInput\n          value={params.prob}\n          onChange={localHandleProb}\n          step={0.01}\n          min={0} \n          max={1}\n          inputMode='decimal'\n        >\n          <NumberInputField\n            color='gray.700' \n            border='1px' \n            borderColor='gray.700'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='gray.700' />\n            <NumberDecrementStepper color='gray.700' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>0 to 1</FormHelperText>\n      </FormControl>\n      <FormControl id='layout' isRequired mt={3}>\n        <FormLabel color='gray.700'>Layout</FormLabel>\n        <Select\n          name='layout'\n          value={params.layout}\n          onChange={localHandleLayout}\n          color='gray.700'\n          backgroundColor='#f8f8ff'\n          border='1px' \n          borderColor='gray.700'\n          _hover={{\n            borderColor: 'gray.400'\n          }}\n          _focus={{\n            borderColor: 'gray.400'\n          }}\n        >\n          <option value=\"random\" style={{backgroundColor: '#f8f8ff'}}>Random</option>\n          <option value=\"grid\" style={{backgroundColor: '#f8f8ff'}}>Grid</option>\n          <option value=\"circle\" style={{backgroundColor: '#f8f8ff'}}>Circle</option>\n          <option value=\"concentric\" style={{backgroundColor: '#f8f8ff'}}>Concentric</option>\n          <option value=\"breadthfirst\" style={{backgroundColor: '#f8f8ff'}}>Breadthfirst</option>\n          <option value=\"cose\" style={{backgroundColor: '#f8f8ff'}}>Cose</option>\n        </Select>\n      </FormControl>\n      <Flex justify='end'>\n        <Button\n          mt={6}\n          mb={4}\n          color=\"#f8f8ff\"\n          bgColor=\"gray.700\"\n          fontWeight=\"normal\"\n          _hover={{ bg: 'gray.600' }}\n          _active={{ bg: 'gray.800' }}\n          type=\"button\"\n          onClick={() => handleSubmit(params.nodes, params.prob, params.layout)}\n        >\n          Submit\n        </Button>\n      </Flex>\n    </form>\n  );\n};","import React, { ChangeEvent, useState } from \"react\"\nimport {\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  NumberInput,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInputField,\n  NumberInputStepper,\n  Select\n} from \"@chakra-ui/react\"\n\ntype Props = {\n  swSettings: {\n    nodes: number,\n    prob: string,\n    knei: number,\n    layout: string,\n  }\n  setSwSettings: React.Dispatch<React.SetStateAction<{\n    nodes: number,\n    prob: string,\n    knei: number,\n    layout: string,\n  }>>\n};\n\nexport default function SmallWorldForm({ swSettings, setSwSettings }: Props) {\n  const [params, setParams] = useState({\n    nodes: 0,\n    prob: '0',\n    knei: 0,\n    layout: 'random'\n  });\n\n  const localHandleNodes = (valStr: string, valNum: number) => {\n    if (isNaN(valNum)) {\n      valNum = 0;\n    }\n\n    setParams({\n      ...params,\n      nodes: valNum\n    })\n  };\n\n  const localHandleProb = (valStr: string, valNum: number) => {\n    setParams({\n      ...params,\n      prob: valStr\n    })\n  };\n\n  const localHandleKnei = (valStr: string, valNum: number) => {\n    if (isNaN(valNum)) {\n      valNum = 0;\n    }\n\n    setParams({\n      ...params,\n      knei: valNum\n    })\n  };\n\n  const localHandleLayout = (e: ChangeEvent<HTMLSelectElement>) => {\n    setParams({\n      ...params,\n      [e.target.name]: e.target.value\n    })\n  };\n\n  const handleSubmit = (n: number, p: string, k: number, l: string) => {\n    setSwSettings({\n      ...swSettings,\n      nodes: n,\n      prob: p,\n      knei: k,\n      layout: l\n    });\n  };\n\n  return (\n    <form>\n      <FormControl id='nodes' isRequired mt={3}>\n        <FormLabel color='gray.700'>Number of Nodes</FormLabel>\n        <NumberInput\n          value={params.nodes} \n          onChange={localHandleNodes}\n          min={0} \n          max={500}\n          inputMode='numeric'\n        >\n          <NumberInputField\n            color='gray.700' \n            border='1px' \n            borderColor='gray.700'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='gray.700' />\n            <NumberDecrementStepper color='gray.700' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>0 to 500</FormHelperText>\n      </FormControl>\n      <FormControl id='nei' isRequired mt={3}>\n        <FormLabel color='gray.700'>Neighborhood</FormLabel>\n        <NumberInput\n          value={params.knei}\n          onChange={localHandleKnei}\n          min={0}\n          max={params.nodes % 2 === 0 ? params.nodes / 2 : Math.floor(params.nodes / 2)}\n          inputMode='numeric'\n        >\n          <NumberInputField\n            color='gray.700' \n            border='1px' \n            borderColor='gray.700'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='gray.700' />\n            <NumberDecrementStepper color='gray.700' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>\n          0 to {params.nodes % 2 === 0 ? `${params.nodes / 2}` : `${Math.floor(params.nodes / 2)}`}\n        </FormHelperText>\n      </FormControl>\n      <FormControl id='prob' isRequired mt={3}>\n        <FormLabel color='gray.700'>Rewiring Probability</FormLabel>\n        <NumberInput\n          value={params.prob}\n          onChange={localHandleProb}\n          step={0.01} \n          min={0} \n          max={1}\n          inputMode='decimal'\n        >\n          <NumberInputField\n            color='gray.700' \n            border='1px' \n            borderColor='gray.700'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='gray.700' />\n            <NumberDecrementStepper color='gray.700' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>0 to 1</FormHelperText>\n      </FormControl>\n      <FormControl id='layout' isRequired mt={3}>\n        <FormLabel color='gray.700'>Layout</FormLabel>\n        <Select\n          name='layout'\n          value={params.layout}\n          onChange={localHandleLayout}\n          color='gray.700'\n          backgroundColor='#f8f8ff'\n          border='1px' \n          borderColor='gray.700'\n          _hover={{\n            borderColor: 'gray.400'\n          }}\n          _focus={{\n            borderColor: 'gray.400'\n          }}\n        >\n          <option value=\"random\" style={{backgroundColor: '#f8f8ff'}}>Random</option>\n          <option value=\"grid\" style={{backgroundColor: '#f8f8ff'}}>Grid</option>\n          <option value=\"circle\" style={{backgroundColor: '#f8f8ff'}}>Circle</option>\n          <option value=\"concentric\" style={{backgroundColor: '#f8f8ff'}}>Concentric</option>\n          <option value=\"breadthfirst\" style={{backgroundColor: '#f8f8ff'}}>Breadthfirst</option>\n          <option value=\"cose\" style={{backgroundColor: '#f8f8ff'}}>Cose</option>\n        </Select>\n      </FormControl>\n      <Flex justify='end'>\n        <Button\n          mt={6}\n          mb={4}\n          color=\"#f8f8ff\"\n          bgColor=\"gray.700\"\n          fontWeight=\"normal\"\n          _hover={{ bg: 'gray.600' }}\n          _active={{ bg: 'gray.800' }}\n          type=\"button\"\n          onClick={() => handleSubmit(params.nodes, params.prob, params.knei, params.layout)}\n        >\n          Submit\n        </Button>\n      </Flex>\n    </form>\n  );\n};","import React from \"react\";\nimport { Heading } from \"@chakra-ui/react\";\n\nexport default function PreferentialForm() {\n  return (\n    <Heading as='h1' size='md' color='gray.700' mt={4}>~ Coming soon ~</Heading>\n  );\n}","import React from \"react\";\nimport {\n  Heading,\n  Box,\n  FormLabel,\n  useRadioGroup,\n  HStack\n} from \"@chakra-ui/react\";\nimport RadioCard from \"./RadioCard.jsx\";\nimport RandomForm from \"./algo-forms/RandomForm\";\nimport SmallWorldForm from \"./algo-forms/SmallWorldForm\";\nimport PreferentialForm from \"./algo-forms/PreferentialForm\";\n\ntype Props = {\n  algo: string,\n  setAlgo: React.Dispatch<React.SetStateAction<string>>,\n  randSettings: {\n    nodes: number,\n    prob: string,\n    layout: string,\n  },\n  setRandSettings: React.Dispatch<React.SetStateAction<{\n    nodes: number,\n    prob: string,\n    layout: string,\n  }>>, \n  swSettings: {\n    nodes: number,\n    prob: string,\n    knei: number,\n    layout: string,\n  },\n  setSwSettings: React.Dispatch<React.SetStateAction<{\n    nodes: number;\n    prob: string;\n    knei: number;\n    layout: string;\n  }>>   \n  // handleNodeChange: (valStr: string, valNum: number) => void,\n  // handleProbChange: (valStr: string, valNum: number) => void,\n  // handleLayoutChange: (valStr: string, valNum: number) => void,\n};\n\nexport default function Settings(props: Props) {\n  const algoOptions = ['Random', 'Small-world']; // Will later also include Pref Attachment\n\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'framework',\n    defaultValue: 'Random',\n    onChange: props.setAlgo,\n  });\n\n  const group = getRootProps();\n\n  return (\n    <Box\n      p={4} \n      m={4} \n      border='1px' \n      borderColor='gray.700' \n      borderRadius='md' \n      shadow='xl'\n      bg='#f8f8ff'\n    >\n      <Heading as='h1' size='md' color='gray.700'>Graph Settings</Heading>\n      <FormLabel color='gray.700' mt={3}>Generation Algorithm</FormLabel>\n      <HStack {...group}>\n        {algoOptions.map(value => {\n          const radio = getRadioProps({ value })\n          return (\n            <RadioCard key={value} {...radio}>\n              {value}\n            </RadioCard>\n          )\n        })}\n      </HStack>\n      <Box mb={-3}>\n        {props.algo === 'Random' \n          ? <RandomForm \n              randSettings={props.randSettings}\n              setRandSettings={props.setRandSettings}\n            /> \n          : (props.algo === 'Small-world' \n              ? <SmallWorldForm\n                  swSettings={props.swSettings}\n                  setSwSettings={props.setSwSettings}\n                /> \n              : <PreferentialForm/>)}\n      </Box>\n    </Box> \n  );\n}","import React from \"react\";\nimport { \n  Heading, \n  Box, \n  Button, \n  Accordion, \n  AccordionButton, \n  AccordionIcon, \n  AccordionItem, \n  AccordionPanel, \n  Link,\n  useDisclosure,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text\n} from \"@chakra-ui/react\";\nimport { InfoOutlineIcon } from '@chakra-ui/icons';\n\nexport default function About() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <Box pt={2} pr={4}>\n      <InfoOutlineIcon \n        onClick={onOpen} \n        h={5} \n        w={5} \n        color='gray.700'\n        _hover={{\n          color: 'gray.500'\n        }}\n        transition='0.1s'\n        cursor='pointer'\n      />\n\n      <Modal onClose={onClose} isOpen={isOpen} size='xl' isCentered>\n        <ModalOverlay />\n        <ModalContent bg='#f8f8ff'>\n          <ModalHeader color='gray.700'>About</ModalHeader>\n          <ModalCloseButton color='gray.700'/>\n          <ModalBody>\n            <Text color='gray.700'>\n              Hi! I'm Alan, a college student studying Computer Science and Statistics. In the summer of 2021, I worked with a professor on some \n              research in the field of <Link isExternal \n                href=\"https://en.wikipedia.org/wiki/Network_science\" color='gray.600' textDecor='underline'>\n                  network science\n              </Link> and \n              studied some pretty interesting models for generating random graphs – namely, the <Link isExternal href=\"https://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93R%C3%A9nyi_model\" color='gray.600' textDecor='underline'>\n                Erdős–Rényi\n              </Link> (random)  and <Link isExternal href=\"https://en.wikipedia.org/wiki/Watts%E2%80%93Strogatz_model\" color='gray.600' textDecor='underline'>\n                Watts-Strogatz\n              </Link> (small-world) models. My research inspired me to build this web app to help you visualize any random network (up to n = 500)\n              that can be generated using either of these models (I'm also self-studying a third model and will be adding that one soon). \n            </Text>\n            <Text color='gray.700' mt={2}>\n              Random graphs are extremely useful for modeling a wide array of real-life networks. Most of my summer research focused on one\n              category of real-life networks: social networks. Social networks are extremely relevant in daily life and are especially\n              of interest right now due to the COVID-19 pandemic and contact tracing. This is essentially the premise of this web app: a tool\n              to enable you to visualize how a hypothetical disease will spread through a randomly generated social network.\n            </Text>\n            <Text color='gray.700' mt={2}>\n              Currently, you can generate the random graphs. I'm still working on adding the ability to create diseases. Later on, you\n              will also be able create an account and save populations/diseases that you create.\n            </Text>\n            <Text color='gray.700' mt={2}>\n              Here is the <Link isExternal href='https://github.com/alansun25/infection-networks' color='gray.600' textDecor='underline'>source code</Link> for this project.\n              If you have any questions, ideas, or comments, feel free to contact me at <Link isExternal href='mailto:as50@williams.edu' color='gray.600' textDecor='underline'>as50@williams.edu</Link>.\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button \n              onClick={onClose} \n              color=\"#f8f8ff\"\n              bgColor=\"gray.700\"\n              fontWeight=\"normal\"\n              _hover={{ bg: 'gray.600' }}\n              _active={{ bg: 'gray.800' }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n}","import React, { useState } from 'react';\nimport { Box, Flex } from '@chakra-ui/layout';\nimport Graph from './components/Graph';\nimport Settings from './components/Settings';\nimport About from './components/About';\n\nfunction App() {\n  const [algo, setAlgo] = useState<string>('Random');\n\n  const [randSettings, setRandSettings] = useState({\n    nodes: 0,\n    prob: '0',\n    layout: 'random'\n  });\n\n  const [swSettings, setSwSettings] = useState({\n    nodes: 0,\n    prob: '0',\n    knei: 0,\n    layout: 'random'\n  });\n\n  // const handleNodeChange = (valStr: string, valNum: number) => {\n  //   if (isNaN(valNum)) {\n  //     valNum = 0;\n  //   }\n\n  //   setSettings({\n  //     ...settings,\n  //     nodes: valNum\n  //   })\n  // };\n\n  // const handleProbChange = (valStr: string, valNum: number) => {\n  //   setSettings({\n  //     ...settings,\n  //     prob: valStr\n  //   })\n  // };\n\n  // const handleLayoutChange = (valStr: string, valNum: number) => {\n  //   setSettings({\n  //     ...settings,\n  //     layout: valStr\n  //   })\n  // };\n  \n  return (\n    <Flex flexDirection='row'>\n      <Box h='auto' w='50%'>\n        <Settings\n          algo={algo}\n          setAlgo={setAlgo}\n          randSettings={randSettings}\n          setRandSettings={setRandSettings}\n          swSettings={swSettings}\n          setSwSettings={setSwSettings}\n          // handleNodeChange={handleNodeChange}\n          // handleProbChange={handleProbChange}\n          // handleLayoutChange={handleLayoutChange}\n        />        \n      </Box>\n      <Box w='100%'>\n        <Graph\n          algo={algo}\n          randSettings={randSettings}\n          swSettings={swSettings}\n        />\n      </Box>\n      <Box pos='fixed' right={0}>\n        <About />\n      </Box>\n    </Flex>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      body: {\n        bg: '#f8f8ff'\n      }\n    }\n  }\n})\n\nReactDOM.render(\n  <ChakraProvider theme={theme}>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}