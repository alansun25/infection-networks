{"version":3,"sources":["styles/graphStyles.ts","components/Graph.tsx","functions/WattsStrogatz.ts","components/RadioCard.jsx","components/algo-forms/RandomForm.tsx","components/algo-forms/SmallWorldForm.tsx","components/algo-forms/PreferentialForm.tsx","components/Settings.tsx","components/About.tsx","App.tsx","index.tsx"],"names":["graphStyles","selector","style","node","data","Graph","graphContainer","useRef","useState","useEffect","n","k","p","l","ref","cy","cytoscape","container","current","elements","maxZoom","i","status","add","group","id","j","h","rand","Math","random","ni","nodes","$id","nh","neighborhood","contains","source","floor","degree","otherNodes","difference","target","toArray","length","neighbors","empty","nonNeighbors","same","layout","name","run","fit","undefined","WattsStrogatz","zIndex","RadioCard","props","useRadio","getInputProps","getCheckboxProps","input","checkbox","as","color","cursor","borderWidth","borderColor","borderRadius","boxShadow","_checked","bg","px","py","transition","children","RandomForm","prob","params","setParams","console","log","action","isRequired","mt","value","onChange","valStr","valNum","isNaN","min","max","inputMode","border","_hover","_focus","step","e","backgroundColor","SmallWorldForm","PreferentialForm","size","Settings","algo","setAlgo","useRadioGroup","defaultValue","getRootProps","getRadioProps","m","shadow","map","radio","mb","About","useDisclosure","isOpen","onOpen","onClose","pt","pr","InfoOutline","onClick","w","isCentered","allowToggle","flex","textAlign","pb","_active","App","flexDirection","pos","right","theme","extendTheme","styles","global","body","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f83a311.chunk.js","sourcesContent":["import cytoscape from \"cytoscape\";\n\nexport const graphStyles = [\n  {\n    selector: 'node',\n    style: {\n      'background-color': (node: cytoscape.NodeSingular) => node.data('status') === 'infected' ? '#E53E3E' : '#b6b6b6',\n      'height': 20,\n      'width': 20\n    }\n  },\n  {\n    selector: 'edge',\n    style: {\n      'width': 0.5,\n      'line-color': '#a5a5a5',\n      'curve-style': 'bezier'\n    }\n  }\n];","import React, { useState, useEffect, useRef } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nimport ErdosRenyi from '../functions/ErdosRenyi';\nimport WattsStrogatz from '../functions/WattsStrogatz';\n\nexport default function Graph() {\n  const graphContainer = useRef<HTMLDivElement>(null);\n  const [algo, setAlgo] = useState<string>('Random');\n\n  useEffect(() => {\n    WattsStrogatz(20, 3, 0.15, \"breadthfirst\", graphContainer);\n  }, []);\n\n  return (\n    <Box ref={graphContainer} zIndex='0' h={900}></Box>\n  );\n}","import cytoscape from \"cytoscape\";\nimport { RefObject } from \"react\";\nimport { graphStyles } from \"../styles/graphStyles\";\n\nexport default function WattsStrogatz(n: number, k: number, p: number, l: string, ref: RefObject<HTMLDivElement>) {\n  // TODO: data validation that should be done before params passed in (Look at R implementation for validation steps)\n\n  let cy = cytoscape({\n    container: ref.current,\n    elements: [],\n    style: graphStyles,\n    maxZoom: 1\n  });\n\n  // Create nodes\n  for (let i = 1; i <= n; i++) {\n    let status = 'normal'\n    if (i % 2 === 0) {\n      status = 'infected';\n    }\n\n    cy.add({\n      group: 'nodes',\n      data: { id: `${i}`, status: status }\n    });\n  }\n\n  // Create edges\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= i + k; j++) {\n      const h = (j - 1) % n + 1; // Wrap back around the ring when j > n\n      const rand = Math.random();\n\n      const ni = cy.nodes().$id(`${i}`);\n      const nh = cy.nodes().$id(`${h}`);\n\n      if (rand < p || ni.neighborhood().contains(nh)) {\n        let source = [ni, nh][Math.floor(Math.random() * 2)];\n\n        // If either node ni or nh have degree n - 1 (already connected to every other node),\n        // make the other node the source by default.\n        if (ni.degree(false) === n - 1) {\n          source = nh;\n        } else if (nh.degree(false) === n - 1) {\n          source = ni;\n        }\n\n        // By default, randomly select a target node to rewire to.\n        const otherNodes = cy.nodes().difference(`#${i}, #${h}`);\n        let target = otherNodes.nodes().toArray()[Math.floor(Math.random() * otherNodes.length)];\n\n        if (ni.degree(false) === n - 1 && nh.degree(false) === n - 1) {\n          // If both ni and nh are connected to every other node, a loop or multi-edge is unavoidable,\n          // so we just choose a purely random node.\n          target = cy.nodes().$id(`${Math.floor(Math.random() * n) + 1}`);\n        } else {\n          const neighbors = source.neighborhood().nodes();\n\n          // If the source has neighbors, choose a target to rewire to such that the target is not\n          // one of these neighbors.\n          if (!neighbors.empty()) {\n            const nonNeighbors = cy.nodes().difference(neighbors);\n            target = nonNeighbors.nodes().toArray()[Math.floor(Math.random() * nonNeighbors.length)];\n            \n            // Prevent loops.\n            while (target.same(source)) {\n              target = nonNeighbors.nodes().toArray()[Math.floor(Math.random() * nonNeighbors.length)];\n            }\n          }\n        }\n\n        cy.add({\n          group: 'edges',\n          data: { id: `${source.id()}-${target.id()}`, source: `${source.id()}`, target: `${target.id()}`}\n        });\n      } else {\n        cy.add({\n          group: 'edges',\n          data: { id: `${ni.id()}-${nh.id()}`, source: `${ni.id()}`, target: `${nh.id()}`}\n        });\n      }\n    }\n  }\n\n  cy.layout({ name: `${l}` }).run();\n  cy.fit(undefined, 50);\n\n  return cy;\n}","import { useRadio } from \"@chakra-ui/radio\";\nimport { Box } from \"@chakra-ui/react\";\n\nexport default function RadioCard(props) {\n  const { getInputProps, getCheckboxProps } = useRadio(props)\n\n  const input = getInputProps()\n  const checkbox = getCheckboxProps()\n\n  return (\n    <Box as=\"label\">\n      <input {...input} />\n      <Box\n        {...checkbox}\n        color=\"#2D3748\"\n        cursor=\"pointer\"\n        borderWidth={1}\n        borderColor=\"#f0f0f0\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        _checked={{\n          bg: \"red.200\",\n          color: \"#f8f8ff\",\n          borderColor: \"red.200\",\n        }}\n        px={5}\n        py={3}\n        transition='0.3s'\n      >\n        {props.children}\n      </Box>\n    </Box>\n  )\n}","import React, { ChangeEvent, ChangeEventHandler, useState } from \"react\";\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  NumberInput,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInputField,\n  NumberInputStepper,\n  Select\n} from \"@chakra-ui/react\"\n\nexport default function RandomForm() {\n  const [params, setParams] = useState({\n    nodes: 0,\n    prob: '0',\n    layout: 'random'\n  });\n\n  const handleNodeChange = (valStr: string, valNum: number) => {\n    if (isNaN(valNum)) {\n      valNum = 0;\n    }\n\n    setParams({\n      ...params,\n      nodes: valNum\n    })\n  }\n\n  const handleProbChange = (valStr: string, valNum: number) => {\n    setParams({\n      ...params,\n      prob: valStr\n    })\n  }\n\n  const handleSelectChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n    setParams({\n      ...params,\n      [name]: value\n    })\n  }\n\n  console.log(params);\n\n  return (\n    <form action=\"\">\n      <FormControl id='nodes' isRequired mt={3}>\n        <FormLabel color='#2D3748'>Number of Nodes</FormLabel>\n        <NumberInput \n          value={params.nodes} \n          onChange={handleNodeChange}\n          min={0} \n          max={500}\n          inputMode='numeric'\n        >\n          <NumberInputField\n            color='#2D3748' \n            border='1px' \n            borderColor='#2D3748'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='#2D3748' />\n            <NumberDecrementStepper color='#2D3748' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>0 to 500</FormHelperText>\n      </FormControl>\n      <FormControl id='prob' isRequired mt={3}>\n        <FormLabel color='#2D3748'>Probability of an Edge Between Two Nodes</FormLabel>\n        <NumberInput\n          value={params.prob}\n          onChange={handleProbChange}\n          step={0.01}\n          min={0} \n          max={1}\n          inputMode='decimal'\n        >\n          <NumberInputField\n            color='#2D3748' \n            border='1px' \n            borderColor='#2D3748'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='#2D3748' />\n            <NumberDecrementStepper color='#2D3748' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>0 to 1</FormHelperText>\n      </FormControl>\n      <FormControl id='layout' isRequired mt={3}>\n        <FormLabel color='#2D3748'>Layout</FormLabel>\n        <Select\n          name='layout'\n          value={params.layout}\n          onChange={handleSelectChange}\n          color='#2D3748'\n          backgroundColor='#f8f8ff'\n          border='1px' \n          borderColor='#2D3748'\n          _hover={{\n            borderColor: 'gray.400'\n          }}\n          _focus={{\n            borderColor: 'gray.400'\n          }}\n        >\n          <option value=\"random\" style={{backgroundColor: '#f8f8ff'}}>Random</option>\n          <option value=\"grid\" style={{backgroundColor: '#f8f8ff'}}>Grid</option>\n          <option value=\"circle\" style={{backgroundColor: '#f8f8ff'}}>Circle</option>\n          <option value=\"concentric\" style={{backgroundColor: '#f8f8ff'}}>Concentric</option>\n          <option value=\"breadthfirst\" style={{backgroundColor: '#f8f8ff'}}>Breadthfirst</option>\n          <option value=\"cose\" style={{backgroundColor: '#f8f8ff'}}>Cose</option>\n        </Select>\n      </FormControl>\n    </form>\n  );\n}","import React from \"react\";\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  NumberInput,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInputField,\n  NumberInputStepper,\n  Select\n} from \"@chakra-ui/react\"\n\nexport default function SmallWorldForm() {\n  return (\n    <form action=\"\">\n      <FormControl id='nodes' isRequired mt={3}>\n        <FormLabel color='#2D3748'>Number of Nodes</FormLabel>\n        <NumberInput min={0} max={500}>\n          <NumberInputField\n            color='#2D3748' \n            border='1px' \n            borderColor='#2D3748'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='#2D3748' />\n            <NumberDecrementStepper color='#2D3748' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>0 to 500</FormHelperText>\n      </FormControl>\n      <FormControl id='nei' isRequired mt={3}>\n        <FormLabel color='#2D3748'>Neighborhood</FormLabel>\n        <NumberInput min={0} /* Max will be the determined based on state of n (odd or even) */>\n          <NumberInputField\n            color='#2D3748' \n            border='1px' \n            borderColor='#2D3748'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='#2D3748' />\n            <NumberDecrementStepper color='#2D3748' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>0 to TBD</FormHelperText>\n      </FormControl>\n      <FormControl id='prob' isRequired mt={3}>\n        <FormLabel color='#2D3748'>Rewiring Probability</FormLabel>\n        <NumberInput step={0.01} min={0} max={1}>\n          <NumberInputField\n            color='#2D3748' \n            border='1px' \n            borderColor='#2D3748'\n            _hover={{\n              borderColor: 'gray.400'\n            }}\n            _focus={{\n              borderColor: 'gray.400'\n            }}\n          />\n          <NumberInputStepper>\n            <NumberIncrementStepper color='#2D3748' />\n            <NumberDecrementStepper color='#2D3748' />\n          </NumberInputStepper>\n        </NumberInput>\n        <FormHelperText color='gray.500'>0 to 1</FormHelperText>\n      </FormControl>\n      <FormControl id='layout' isRequired mt={3}>\n        <FormLabel color='#2D3748'>Layout</FormLabel>\n        <Select\n          color='#2D3748'\n          backgroundColor='#f8f8ff'\n          border='1px' \n          borderColor='#2D3748'\n          _hover={{\n            borderColor: 'gray.400'\n          }}\n          _focus={{\n            borderColor: 'gray.400'\n          }}\n        >\n          <option value=\"random\" style={{backgroundColor: '#f8f8ff'}}>Random</option>\n          <option value=\"grid\" style={{backgroundColor: '#f8f8ff'}}>Grid</option>\n          <option value=\"circle\" style={{backgroundColor: '#f8f8ff'}}>Circle</option>\n          <option value=\"concentric\" style={{backgroundColor: '#f8f8ff'}}>Concentric</option>\n          <option value=\"breadthfirst\" style={{backgroundColor: '#f8f8ff'}}>Breadthfirst</option>\n          <option value=\"cose\" style={{backgroundColor: '#f8f8ff'}}>Cose</option>\n        </Select>\n      </FormControl>\n    </form>\n  );\n}","import React from \"react\";\nimport { Heading } from \"@chakra-ui/react\";\n\nexport default function PreferentialForm() {\n  return (\n    <Heading as='h1' size='md' color='#2D3748' mt={4}>~ Coming soon ~</Heading>\n  );\n}","import React, { useEffect, useState } from \"react\";\nimport {\n  Heading,\n  Box,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  Input,\n  RadioGroup,\n  VStack,\n  Radio,\n  Text,\n  useRadioGroup,\n  HStack\n} from \"@chakra-ui/react\";\nimport RadioCard from \"./RadioCard.jsx\";\nimport RandomForm from \"./algo-forms/RandomForm\";\nimport SmallWorldForm from \"./algo-forms/SmallWorldForm\";\nimport PreferentialForm from \"./algo-forms/PreferentialForm\";\n\nexport default function Settings() {\n  const algoOptions = ['Random', 'Small-world', 'Preferential Attachment'];\n  const [algo, setAlgo] = useState<string>('Random');\n\n  // Random graph algorithm settings\n  const [rs, setRs] = useState({\n    n: 0,\n    p: '0',\n    l: 'random'\n  })\n\n  // Small world graph algorithm settings\n  const [sw, setSw] = useState({\n    n: 0,\n    p: '0',\n    k: 0,\n    l: 'random'\n  })\n\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'framework',\n    defaultValue: 'Random',\n    onChange: setAlgo,\n  });\n\n  useEffect(() => console.log(algo));\n\n  const group = getRootProps();\n\n  return (\n    <Box\n      p={4} \n      m={4} \n      border='1px' \n      borderColor='#2D3748' \n      borderRadius='md' \n      shadow='xl'\n      bg='#f8f8ff'\n    >\n      <Heading as='h1' size='md' color='#2D3748'>Graph Settings</Heading>\n      <FormLabel color='#2D3748' mt={3}>Generation Algorithm</FormLabel>\n      <HStack {...group}>\n        {algoOptions.map(value => {\n          const radio = getRadioProps({ value })\n          return (\n            <RadioCard key={value} {...radio}>\n              {value}\n            </RadioCard>\n          )\n        })}\n      </HStack>\n      <Box mb={-3}>\n        {algo === 'Random' ? <RandomForm/> : (algo === 'Small-world' ? <SmallWorldForm/> : <PreferentialForm/>)};\n      </Box>\n    </Box> \n  );\n}","import React from \"react\";\nimport { \n  Heading, \n  Box, \n  Button, \n  Accordion, \n  AccordionButton, \n  AccordionIcon, \n  AccordionItem, \n  AccordionPanel, \n  useDisclosure,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay\n} from \"@chakra-ui/react\";\nimport { InfoOutlineIcon } from '@chakra-ui/icons';\n\nexport default function About() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <Box pt={2} pr={4}>\n      <InfoOutlineIcon \n        onClick={onOpen} \n        h={5} \n        w={5} \n        color='#2D3748'\n        _hover={{\n          color: 'gray.500'\n        }}\n        transition='0.1s'\n        cursor='pointer'\n      />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent bg='#f8f8ff'>\n          <ModalHeader color='#2D3748'>About</ModalHeader>\n          <ModalCloseButton color='#2D3748'/>\n          <ModalBody>\n            <Accordion allowToggle>\n              <AccordionItem color='#2D3748'>\n                <h2>\n                  <AccordionButton _focus={{}}>\n                    <Box flex=\"1\" textAlign=\"left\">\n                      Random\n                    </Box>\n                    <AccordionIcon/>\n                  </AccordionButton>\n                </h2>\n                <AccordionPanel pb={4}>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n                  tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n                  veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n                  commodo consequat.\n                </AccordionPanel>\n              </AccordionItem>\n\n              <AccordionItem color='#2D3748'>\n                <h2>\n                  <AccordionButton _focus={{}}>\n                    <Box flex=\"1\" textAlign=\"left\">\n                      Small-world\n                    </Box>\n                    <AccordionIcon/>\n                  </AccordionButton>\n                </h2>\n                <AccordionPanel pb={4}>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n                  tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n                  veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n                  commodo consequat.\n                </AccordionPanel>\n              </AccordionItem>\n\n              <AccordionItem color='#2D3748'>\n                <h2>\n                  <AccordionButton _focus={{}}>\n                    <Box flex=\"1\" textAlign=\"left\">\n                      Preferential Attachment\n                    </Box>\n                    <AccordionIcon/>\n                  </AccordionButton>\n                </h2>\n                <AccordionPanel pb={4}>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n                  tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n                  veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n                  commodo consequat.\n                </AccordionPanel>\n              </AccordionItem>\n            </Accordion>\n          </ModalBody>\n          <ModalFooter>\n            <Button \n              onClick={onClose} \n              bg='teal.500'\n              _hover={{ bg: 'teal.400' }}\n              _active={{ bg: 'teal.600' }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n}","import React from 'react';\nimport { Box, Flex } from '@chakra-ui/layout';\nimport Graph from './components/Graph';\nimport Settings from './components/Settings';\nimport About from './components/About';\n\nfunction App() {\n  return (\n    <Flex flexDirection='row'>\n      <Box h='auto' w='50%'>\n        <Settings />        \n      </Box>\n      <Box w='100%'>\n        <Graph />\n      </Box>\n      <Box pos='fixed' right={0}>\n        <About />\n      </Box>\n    </Flex>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      body: {\n        bg: '#f8f8ff'\n      }\n    }\n  }\n})\n\nReactDOM.render(\n  <ChakraProvider theme={theme}>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}